mutate(index = row_number()) %>%
# group_by(contact_type) %>%
filter(feature_score > mean(feature_score) + 3*sd(feature_score) |
std_dev > mean(std_dev) + 3 * sd(std_dev)) %>%
summarize(thunder_bins = list(index))
b %>%
mutate(index = row_number()) %>%
group_by(contact_type) %>%
filter(feature_score > mean(feature_score) + 3*sd(feature_score) |
std_dev > mean(std_dev) + 3 * sd(std_dev)) %>%
summarize(thunder_bins = list(index)) %>%
tidyr::unnest(thunder_bins) %>%
ungroup() %>%
arrange(thunder_bins) %>%
pull(thunder_bins)
b %>%
mutate(index = row_number()) %>%
group_by(contact_type) %>%
filter(feature_score > mean(feature_score) + 3*sd(feature_score) |
std_dev > mean(std_dev) + 3 * sd(std_dev)) %>%
summarize(thunder_bins = list(index))
b %>%
mutate(index = row_number()) %>%
filter(contact_type ==  "inter") %>%
filter(feature_score > mean(feature_score) + 3*sd(feature_score) |
std_dev > mean(std_dev) + 3 * sd(std_dev)) %>%
summarize(thunder_bins = list(index))
filter(contact_type ==  "intra") %>%
filter(contact_type ==  "intra") %>%
b %>%
mutate(index = row_number()) %>%
filter(contact_type ==  "intra") %>%
filter(feature_score > mean(feature_score) + 3*sd(feature_score) |
std_dev > mean(std_dev) + 3 * sd(std_dev)) %>%
summarize(thunder_bins = list(index))
?mad
b %>%
mutate(index = row_number()) %>%
filter(contact_type ==  "intra") %>%
filter(feature_score > median(feature_score) + 3*mad(feature_score)) %>%
summarize(thunder_bins = list(index))
b %>%
mutate(index = row_number()) %>%
filter(contact_type ==  "inter") %>%
filter(feature_score > median(feature_score) + 3*mad(feature_score)) %>%
summarize(thunder_bins = list(index))
b %>%
mutate(index = row_number()) %>%
filter(contact_type ==  "intra") %>%
filter(feature_score > median(feature_score) + 3*mad(feature_score)) %>%
summarize(thunder_bins = list(index))
bind_rows(
b %>%
mutate(index = row_number()) %>%
filter(contact_type ==  "inter") %>%
filter(feature_score > mean(feature_score) + 3*sd(feature_score) |
std_dev > mean(std_dev) + 3 * sd(std_dev)) %>%
summarize(thunder_bins = list(index)),
b %>%
mutate(index = row_number()) %>%
filter(contact_type ==  "intra") %>%
filter(feature_score > median(feature_score) + 3*mad(feature_score)) %>%
summarize(thunder_bins = list(index))
)
bind_rows(
b %>%
mutate(index = row_number()) %>%
filter(contact_type ==  "inter") %>%
filter(feature_score > mean(feature_score) + 3*sd(feature_score) |
std_dev > mean(std_dev) + 3 * sd(std_dev)) %>%
summarize(thunder_bins = list(index)),
b %>%
mutate(index = row_number()) %>%
filter(contact_type ==  "intra") %>%
filter(feature_score > median(feature_score) + 3*mad(feature_score)) %>%
summarize(thunder_bins = list(index))
) %>%
tidyr::unnest(thunder_bins) %>%
ungroup() %>%
arrange(thunder_bins) %>%
pull(thunder_bins)
bind_rows(
b %>%
mutate(index = row_number()) %>%
filter(contact_type ==  "inter") %>%
filter(feature_score > mean(feature_score) + 3*sd(feature_score) |
std_dev > mean(std_dev) + 3 * sd(std_dev)) %>%
summarize(thunder_bins = list(index)),
b %>%
mutate(index = row_number()) %>%
filter(contact_type ==  "intra") %>%
filter(feature_score > median(feature_score) + 3*mad(feature_score)) %>%
summarize(thunder_bins = list(index))
) %>%
tidyr::unnest(thunder_bins)
bind_rows(
b %>%
mutate(index = row_number()) %>%
filter(contact_type ==  "inter") %>%
filter(feature_score > mean(feature_score) + 3*sd(feature_score) |
std_dev > mean(std_dev) + 3 * sd(std_dev)) %>%
summarize(thunder_bins = list(index)),
b %>%
mutate(index = row_number()) %>%
filter(contact_type ==  "intra") %>%
filter(feature_score > median(feature_score) + 3*mad(feature_score)) %>%
summarize(thunder_bins = list(index))
) %>%
tidyr::unnest(thunder_bins) %>%
ungroup() %>%
arrange(thunder_bins) %>%
pull(thunder_bins)
?bind_rows
?filter
build()
load_all()
library(devtools)
build()
load_all()
test()
test()
?mad
install.packages("testthat")
library(devtools)
install.packages("devtools")
library(devtools)
?install_github
install_github("https://github.com/brycerowland/thundeR.git")
?test
test_file()
run_thunder("test_data.txt.gz", n_cell_types = k,
itter = 1,
subset_mix_out_path = "test_subset_out.txt.gz")
run_thunder("tests/testthat/test_data.txt.gz", n_cell_types = k,
itter = 1,
subset_mix_out_path = "test_subset_out.txt.gz")
k <- 2
run_thunder("tests/testthat/test_data.txt.gz", n_cell_types = k,
itter = 1,
subset_mix_out_path = "test_subset_out.txt.gz")
test_file()
test_file
test_file()
test_active_file()
test_active_file()
test_active_file()
?test_that
usethis::use_testthat()
use_test()
use_test()
use_test()
?use_test()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
load_all()
test_active_file()
run_thunder
build()
load_all()
test_active_file()
test_active_file()
load_all()
test_active_file()
load_all()
test_active_file()
.mix
nmf_fit(mixture = .mix,
n_cell_types = n_cell_types,
itter = itter)
test_active_file()
itter
itter
n_cell_types
load_all()
test_active_file()
itter
n_cell_types
mixture
nrow(mixture)
itter
NMF::nmf(mixture, rank = n_cell_types, method="brunet",seed="random",nrun=itter)
load_all()
test_active_file()
test_active_file()
NMF::nmf(mixture, rank = n_cell_types, method="brunet",seed="random",nrun=itter)
install.packages("NMF")
install.packages("NMF")
mix <- read_tsv("tests/testthat/new_test_data.txt")
mix <- readr::read_tsv("tests/testthat/new_test_data.txt")
mix
nmf(mixture, rank = 2, nrun = 1)
NMF::nmf(mixture, rank = 2, nrun = 1)
NMF::nmf(mix, rank = 2, nrun = 1)
NMF::nmf(mix[,2:3], rank = 2, nrun = 1)
NMF::nmf(mixture, rank = n_cell_types, method="brunet",seed="random",nrun=itter)
mix[,2:3]
mix[,2:3] %>%
mix <- readr::read_tsv("tests/testthat/new_test_data.txt") %>%
column_to_rownames("bin_name") %>%
filter(rowSums(.) != 0)
library(tidyverse
library(tidyverse)
library(tidyverse)
mix <- readr::read_tsv("tests/testthat/new_test_data.txt") %>%
column_to_rownames("bin_name") %>%
filter(rowSums(.) != 0)
mix
NMF::nmf(mix[,2:3], rank = 2, nrun = 1)
NMF::nmf(mix, rank = 2, nrun = 1)
library(testthat)
?test_active_file
library(devtools)
test_active_file()
mixture
itter
n_cell_types
NMF::nmf(mixture, rank = n_cell_types, method="brunet",seed="random",nrun=itter)
test_active_file()
test_active_file()
nmf(mixture, rank = 2, nrun = 1)
test_active_file()
test_active_file()
?nmf
nmf(x = matrix(c(1,2,3,4,5,6), nrow = 3), rank = 2, nrun = 1)
nmf(x = matrix(c(1,2,3,4,5,6), nrow = 3), rank = 2, nrun = 1)
test_active_file()
library(NMF)
test_active_file()
nmf(x = matrix(c(1,2,3,4,5,6), nrow = 3), rank = 2, nrun = 1)
test_active_file()
test_active_file()
test_active_file()
test_active_file()
NMF::nmf(mixture, rank = n_cell_types, method="brunet",seed="random",nrun=itter)
nmf(x = matrix(c(1,2,3,4,5,6), nrow = 3), rank = 2, nrun = 1)
test_active_file()
load_all()
test_active_file()
load_all()
test_active_file()
load_all()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
load_all()
test_active_file()
test_active_file()
load_all()
test_active_file()
test_active_file()
load_all()
test_active_file()
test_active_file()
test_active_file()
load_all()
test_active_file()
library(NMF)
test_active_file()
library(devtools)
test_active_file()
load_all()
test_active_file()
load_all()
test_active_file()
load_all()
test_active_file()
load_all()
test_active_file()
load_all()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
load_all()
test_active_file()
load_all()
test_active_file()
print(nrow(subset_init_nmf(mix, init_fit)))
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
load_all()
test_active_file()
test_active_file()
load_all()
test_active_file()
#Read in mix data
mix <- read_tsv("test/testthat/test_data.txt.gz") %>%
column_to_rownames("bin_name") %>%
filter(rowSums(.) != 0)
#Read in mix data
mix <- read_tsv("tests/testthat/test_data.txt.gz") %>%
column_to_rownames("bin_name") %>%
filter(rowSums(.) != 0)
init_fit <- nmf(mix, rank = 2, nrun = 1, seed = 13)
mutate_basis_matrix(init_fit)
m <- mutate_basis_matrix(init_fit)
m %>%
mutate(index = row_number()) %>%
filter(contact_type ==  "intra") %>%
filter(feature_score > median(feature_score) + 3*mad(feature_score) |
round(feature_score, 10) == 1) %>%
summarize(thunder_bins = list(index))
m %>%
mutate(index = row_number()) %>%
filter(contact_type ==  "intra") %>%
filter(feature_score > median(feature_score) + 3*mad(feature_score) |
round(feature_score, 10) == 1)
m %>%
mutate(index = row_number()) %>%
filter(contact_type ==  "intra") %>% summarise(median(feature_score) + 3*mad(feature_score))
test_active_file()
test_active_file()
test_active_file()
expect_condition(nrow(sub))
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
load_all()
test_active_file()
test_active_file()
load_all()
test_active_file()
load_all()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
load_all()
test_active_file()
test_active_file()
test_active_file()
load_all()
test_active_file()
load_all()
test_active_file()
load_all()
test_active_file()
load_all()
test_active_file()
test_active_file()
load_all()
test_active_file()
load_all()
test_active_file()
load_all()
test_active_file()
test_active_file()
test_active_file()
load_all()
test_active_file()
test_active_file()
load_all()
test_active_file()
test_active_file()
load_all()
test_active_file()
load_all()
test_active_file()
test_active_file()
test_active_file()
load_all()
test_active_file()
test_active_file()
library(thundeR)
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_that("THUNDER gives an informative error message for bad column names", {
#First column should be feature_name
expect_error(run_thunder("new_cols_test_data.txt",
n_cell_types = 2,
itter = 1,
subset_mix_out_path = "new_cols_subset.txt.gz"),
"First column",
ignore.case = T)
})
test_that("THUNDER gives an informative error message for bad column names", {
#First column should be feature_name
expect_error(run_thunder("new_cols_test_data.txt",
n_cell_types = 2,
itter = 1,
subset_mix_out_path = "new_cols_subset.txt.gz"),
"First column",
ignore.case = T)
})
test_active_file()
test_active_file()
test_active_file()
?expect_error
test_active_file()
?Error
?errorCondition
test_active_file()
test_active_file()
test_that("THUNDER gives an informative error message for bad column names", {
#First column should be feature_name
expect_error(run_thunder("old_format_test_data.txt",
n_cell_types = 2,
itter = 1,
subset_mix_out_path = "new_cols_subset.txt.gz"),
"First column")
})
test_active_file()
test_active_file()
test_that("THUNDER gives an informative error message for bad column names", {
#First column should be feature_name
expect_error(run_thunder("tests/testthat/old_format_test_data.txt",
n_cell_types = 2,
itter = 1,
subset_mix_out_path = "new_cols_subset.txt.gz"),
"First column")
})
test_that("THUNDER gives an informative error message for bad column names", {
#First column should be feature_name
expect_error(run_thunder("tests/testthat/old_no_contact_type copy.txtold_no_contact_type.txt",
n_cell_types = 2,
itter = 1,
subset_mix_out_path = "new_cols_subset.txt.gz"),
"First column")
})
test_that("THUNDER gives an informative error message for bad column names", {
#First column should be feature_name
expect_error(run_thunder("tests/testthat/old_no_contact_type copy.txt",
n_cell_types = 2,
itter = 1,
subset_mix_out_path = "new_cols_subset.txt.gz"),
"First column")
})
test_that("THUNDER gives an informative error message when contact_type isn't provided", {
#First column should be feature_name
expect_error(run_thunder("tests/testthat/old_no_contact_type copy.txt",
n_cell_types = 2,
itter = 1,
subset_mix_out_path = "new_cols_subset.txt.gz"),
"Second column")
})
test_that("THUNDER gives an informative error message when contact_type isn't provided", {
#First column should be feature_name
expect_error(run_thunder("tests/testthat/old_no_contact_type copy.txt",
n_cell_types = 2,
itter = 1,
subset_mix_out_path = "new_cols_subset.txt.gz"),
"Second column")
})
run_thunder("tests/testthat/old_no_contact_type copy.txt",
n_cell_types = 2,
itter = 1,
subset_mix_out_path = "new_cols_subset.txt.gz")
test_that("THUNDER gives an informative error message when contact_type isn't provided", {
#First column should be feature_name
expect_error(run_thunder("tests/testthat/old_no_contact_type copy.txt",
n_cell_types = 2,
itter = 1,
subset_mix_out_path = "new_cols_subset.txt.gz"),
"Second column")
})
load_all()
test_that("THUNDER gives an informative error message when contact_type isn't provided", {
#First column should be feature_name
expect_error(run_thunder("tests/testthat/old_no_contact_type copy.txt",
n_cell_types = 2,
itter = 1,
subset_mix_out_path = "new_cols_subset.txt.gz"),
"Second column")
})
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
.raw_mix
.raw_mix %>% filter(across(contains("mixture"), ~rowSums(.x) > 100))
.raw_mix %>% filter(across(contains("mixture"), ~rowSums(.) > 100))
.raw_mix %>% filter(rowSums(across(contains("mixture")) > 100))
.raw_mix %>% mutate(across(contains("mixture"), rowSums))
test_active_file()
.raw_mix %>% rowwise() %>% mutate(across(contains("mixture"), rowSums))
.raw_mix %>% rowwise() %>% mutate(across(contains("mixture"), sum))
.raw_mix %>% rowwise() %>% mutate(s = across(contains("mixture"), sum))
.raw_mix %>% rowwise() %>% mutate(s = across(contains("mixture"), sum))
.raw_mix %>% rowwise() %>% mutate(s = across(contains("mixture"), rowSum))
.raw_mix %>% rowwise() %>% mutate(s = across(contains("mixture"), rowSums))
.raw_mix %>% rowwise() %>% mutate(s = across(contains("mixture"), rowSums))
.raw_mix %>% rowwise() %>% mutate(s = rowSums(contains("mixture")))
.raw_mix %>% rowwise() %>% mutate(s = rowSums(across(contains("mixture"))))
.raw_mix %>% rowwise() %>% mutate(s = rowSums(across(contains("mixture"))) > 100)
.raw_mix %>% rowwise() %>% filter(rowSums(across(contains("mixture"))) > 100)
test_active_file()
test_active_file()
library(devtools)
test_active_file()
.raw_mix %>%
select(-c(1,2))
test_active_file()
.mix
test_active_file()

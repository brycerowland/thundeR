mutate_basis_matrix(fitt)
?`name-repair`
?as_tibble
load_all()
mutate_basis_matrix
View(mutate_basis_matrix)
rm("mutate_basis_matrix")
load_all()
mutate_basis_matrix(fitt)
load_all()
mutate_basis_matrix(fitt)
is.data.frame(basis(nmf_obj))
is.data.frame(basis(fitt))
is.matrix(basis(fitt))
load_all()
mutate_basis_matrix(fitt)
vec_as_names
vctrs::vec_as_names(colnames(basis(fitt)), NULL)
vctrs::vec_as_names(colnames(basis(fitt)), repair = NULL)
vctrs::vec_as_names(names = colnames(basis(fitt)), repair = NULL)
vctrs::vec_as_names(names = colnames(basis(fitt)), repair = c("minimal", "unique", "universal", "check_unique"))
colnames(basis(fitt))
basis(nmfObject())
basis(fitt) %>% head()
make.names
?make.names
dim(basis(fitt))
dim(basis(fitt))[[2]]
rep(1:2)
seq(1:2)
seq(1:10)
str_c("celltype", seq(1:10), "_features")
mutate_basis_matrix <- function(nmf_obj, type, name){
.basis <- basis(nmf_obj)
colnames(.basis) <- str_c("celltype", seq(1:dim(.basis[[2]])), "_features")
.basis %>%
as_tibble()
}
rm("mutate_basis_matrix")
load_all()
mutate_basis_matrix(fitt)
load_all
load_all()
mutate_basis_matrix(fitt)
use_test("mutate_basis_matrix")
expect_true
library(testthat)
?expect_true
mutate_basis_matrix(fitt) %>% colnames()
str_detect()
?str_detect
str_detect(mutate_basis_matrix(fitt) %>% colnames(), "celltype[0-9]*_features")
all(str_detect(mutate_basis_matrix(fitt) %>% colnames(), "celltype[0-9]*_features"))
featureScore(nmf_obj)
mutate_basis_matrix <- function(nmf_obj, type, name){
.basis <- basis(nmf_obj)
colnames(.basis) <- str_c("celltype", seq(1:dim(.basis)[[2]]), "_features")
.basis %>%
as_tibble() %>%
mutate(featureScore(nmf_obj))
}
rm("mutate_basis_matrix")
load_all()
thunder("example_data/test_data.txt.gz", n_cell_types = 2)
load_all()
thunder("example_data/test_data.txt.gz", n_cell_types = 2, itter = 5)
load_all
load_all()
?thuner
?thunder
thunder
thunder("example_data/test_data.txt.gz", n_cell_types = 2, itter = 5)
thunder("example_data/test_data.txt.gz", n_cell_types = 2, itter = 1)
thunder("example_data/test_data.txt.gz", n_cell_types = 2, itter = 1) %>%
basis()
thunder("example_data/test_data.txt.gz", n_cell_types = 10, itter = 1) %>%
basis()
use_test("thunder")
test_check("thundeR")
test_check("thundeR")
?exists
file.exists()
file.exists("example_data/test_data_init_out.rds")
test_that("out_init_nmf option outputs a .rds file", {
expect_true(file.exists("example_data/test_data_init_out.rds"))
})
test_check("thundeR")
test_that("out_init_nmf option outputs a .rds file", {
expect_true(file.exists("example_data/test_data_init_out.rds"))
})
is.character(NULL)
load_all()
test_that("out_init_nmf option outputs a .rds file", {
thunder("example_data/test_data.txt.gz", n_cell_types = 2,
itter = 1,
)
expect_true(file.exists("example_data/test_data_init_out.rds"))
})
test_that("out_init_nmf option outputs a .rds file", {
thunder("example_data/test_data.txt.gz", n_cell_types = 2,
itter = 1,
out_init_nmf = "example_data/test_data_init_out.rds")
expect_true(file.exists("example_data/test_data_init_out.rds"))
})
test_that("out_init_nmf option outputs a .rds file", {
thunder("example_data/test_data.txt.gz", n_cell_types = 2,
itter = 1,
out_init_nmf = "example_data/test_data_init_out.rds")
expect_true(file.exists("example_data/test_data_init_out.rds"))
file.remove("example_data/test_data_init_out.rds")
})
test_that("out_init_nmf option outputs a .rds file", {
thunder("example_data/test_data.txt.gz", n_cell_types = 2,
itter = 1,
out_init_nmf = "example_data/test_data_init_out.rds")
expect_true(file.exists("example_data/test_data_init_out.rds"))
file.remove("example_data/test_data_init_out.rds")
})
k <- sample(1:100, size = 1)
k
thunder("example_data/test_data.txt.gz", n_cell_types = 2,
itter = 1)
k <- sample(1:100, size = 1)
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = 2,
itter = 1)
mutate_basis_matrix(test_fit)
k <- sample(1:100, size = 1)
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = k,
itter = 1)
mutate_basis_matrix(test_fit)
k
mutate_basis_matrix(test_fit) %>%
select(1:k)
mutate_basis_matrix(test_fit) %>%
select(all_of(1:k))
mutate_basis_matrix(test_fit) %>%
select(all_of(1:k))
test_that("colnames are formatted correctly", {
k <- sample(1:100, size = 1)
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = k,
itter = 1)
check_cols <- mutate_basis_matrix(test_fit) %>%
select(all_of(1:k))
any(str_detect(check_cols, "celltype[0-9]*_features"))
})
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = 5,
itter = 1)
help(package="testthat", help_type="html")
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = 5,
itter = 1)
mutate_basis_matrix(test_fit) %>%
select(std_dev)
load_all()
test_that("std deviation works with more than two cell types", {
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = 5,
itter = 1)
mutate_basis_matrix(test_fit) %>%
select(std_dev)
})
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = 5,
itter = 1)
mutate_basis_matrix(test_fit) %>%
select(std_dev)
load_all()
load_all()
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = 5,
itter = 1)
mutate_basis_matrix(test_fit) %>%
select(std_dev)
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = 5,
itter = 1)
test_fit
mutate_basis_matrix(test_fit)
?pmap
load_all()
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = 5,
itter = 1)
mutate_basis_matrix(test_fit)
mutate_basis_matrix(test_fit) %>%
mutate(std_dev = pmap(., sd))
mutate_basis_matrix(test_fit) %>%
rowwise() %>%
mutate(std_dev = sd(c_across()))
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = 2,
itter = 1)
mutate_basis_matrix(test_fit) %>%
rowwise() %>%
mutate(std_dev = sd(c_across()))
sd(c(9617, 15139))
sd(c(1805, 3478))
mutate_basis_matrix(test_fit) %>%
rowwise() %>%
mutate(std_dev = sd(c_across(starts_with("celltype"))))
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = 2,
itter = 1)
mutate_basis_matrix(test_fit)
load_all()
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = 2,
itter = 1)
mutate_basis_matrix(test_fit)
sd(c(11270, 14115))
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = 2,
itter = 1)
mutate_basis_matrix(test_fit) %>%
select(std_dev) %>%
is.numeric()
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = 2,
itter = 1)
mutate_basis_matrix(test_fit) %>%
select(std_dev)
mutate_basis_matrix(test_fit) %>%
pull(std_dev)
sd_vec <- mutate_basis_matrix(test_fit) %>%
pull(std_dev)
sd_vec
is.numeric(sd_vec)
test_that("std deviation works with more than two cell types", {
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = 5,
itter = 1)
sd_vec <- mutate_basis_matrix(test_fit) %>%
pull(std_dev)
expect_true(is.numeric(sd_vec))
expect_true(all(sd_vec > 0))
})
sd_vec
mutate_basis_matrix(test_fit)
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = 5,
itter = 1)
sd_vec <- mutate_basis_matrix(test_fit) %>%
pull(std_dev)
expect_true(is.numeric(sd_vec))
expect_true(all(sd_vec > 0))
mutate_basis_matrix(test_fit)
load_all()
mutate_basis_matrix(test_fit)
mutate_basis_matrix(test_fit)
load_all()
mutate_basis_matrix(test_fit)
test_that("feature score works with more than two cell types", {
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = 5,
itter = 1)
fs_vec <- mutate_basis_matrix(test_fit) %>%
pull(feature_score)
expect_true(is.numeric(fs_vec))
expect_true(all(fs_vec > 0))
})
?as_tibble
document()
document
document()
?mutate_basis_matrix
basis(fit)
basis(fitt)
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = 5,
itter = 1)
mutate_basis_matrix(test_fit) %>%
pull(bin_pair)
help(package="testthat", help_type="html")
test_that("bin_pair column exists", {
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = 5,
itter = 1)
bp_vec <- mutate_basis_matrix(test_fit) %>%
pull(bin_pair)
expect_true(is.character(bp_vec))
})
?rownames_to_column
load_all()
test_that("bin_pair column exists", {
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = 5,
itter = 1)
bp_vec <- mutate_basis_matrix(test_fit) %>%
pull(bin_pair)
expect_true(is.character(bp_vec))
})
?as_tibble
load_all()
test_that("bin_pair column exists", {
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = 5,
itter = 1)
bp_vec <- mutate_basis_matrix(test_fit) %>%
pull(bin_pair)
expect_true(is.character(bp_vec))
})
test_that("colnames are formatted correctly", {
#Generate some random number of cell types
k <- sample(1:100, size = 1)
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = k,
itter = 1)
#We want to check that the first k columns are formatted as we expect.
check_cols <- mutate_basis_matrix(test_fit) %>%
select(all_of(1:k))
any(str_detect(check_cols, "celltype[0-9]*_features"))
})
test_that("std deviation works with more than two cell types", {
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = 5,
itter = 1)
sd_vec <- mutate_basis_matrix(test_fit) %>%
pull(std_dev)
expect_true(is.numeric(sd_vec))
expect_true(all(sd_vec > 0))
})
test_that("feature score works with more than two cell types", {
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = 5,
itter = 1)
fs_vec <- mutate_basis_matrix(test_fit) %>%
pull(feature_score)
expect_true(is.numeric(fs_vec))
})
test_that("bin_pair column exists", {
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = 5,
itter = 1)
bp_vec <- mutate_basis_matrix(test_fit) %>%
pull(bin_pair)
expect_true(is.character(bp_vec))
})
mutate_basis_matrix(test_fit)
test_that("colnames are formatted correctly", {
#Generate some random number of cell types
k <- sample(1:100, size = 1)
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = k,
itter = 1)
#We want to check that the first k columns are formatted as we expect.
check_cols <- mutate_basis_matrix(test_fit) %>%
select(all_of(1:k))
all(str_detect(check_cols, "celltype[0-9]*_features"))
})
check_cols <- mutate_basis_matrix(test_fit) %>%
select(all_of(1:k))
check_cols
mutate_basis_matrix(test_fit)
test_that("colnames are formatted correctly", {
#Generate some random number of cell types
k <- sample(1:100, size = 1)
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = k,
itter = 1)
#We want to check that the first k columns are formatted as we expect.
check_cols <- mutate_basis_matrix(test_fit) %>%
select(all_of(1:k))
all(str_detect(check_cols, "celltype[0-9]*_features"))
})
all(str_detect(check_cols, "celltype[0-9]*_features"))
#Generate some random number of cell types
k <- sample(1:100, size = 1)
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = k,
itter = 1)
#We want to check that the first k columns are formatted as we expect.
check_cols <- mutate_basis_matrix(test_fit) %>%
select(all_of(1:k))
all(str_detect(check_cols, "celltype[0-9]*_features"))
test_that("colnames are formatted correctly", {
#Generate some random number of cell types
k <- sample(1:100, size = 1)
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = k,
itter = 1)
#We want to check that the first k columns are formatted as we expect.
check_cols <- mutate_basis_matrix(test_fit) %>%
select(all_of(1:k))
expect_true(all(str_detect(check_cols, "celltype[0-9]*_features")))
})
test_that("colnames are formatted correctly", {
#Generate some random number of cell types
k <- sample(1:100, size = 1)
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = k,
itter = 1)
#We want to check that the first k columns are formatted as we expect.
check_cols <- mutate_basis_matrix(test_fit) %>%
select(all_of(2:(k+1)))
expect_true(all(str_detect(check_cols, "celltype[0-9]*_features")))
})
#Generate some random number of cell types
k <- sample(1:100, size = 1)
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = k,
itter = 1)
#We want to check that the first k columns are formatted as we expect.
check_cols <- mutate_basis_matrix(test_fit) %>%
select(all_of(2:(k+1)))
#Generate some random number of cell types
k <- 5
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = k,
itter = 1)
#We want to check that the first k columns are formatted as we expect.
check_cols <- mutate_basis_matrix(test_fit) %>%
select(all_of(2:(k+1)))
check_cols
expect_true(all(str_detect(check_cols, "celltype[0-9]*_features")))
all(str_detect(check_cols, "celltype[0-9]*_features"))
check_cols
test_that("colnames are formatted correctly", {
#Generate some random number of cell types
k <- 5
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = k,
itter = 1)
#We want to check that the first k columns are formatted as we expect.
check_cols <- mutate_basis_matrix(test_fit) %>%
select(all_of(2:(k+1))) %>%
colnames()
expect_true(all(str_detect(check_cols, "celltype[0-9]*_features")))
})
test_that("colnames are formatted correctly", {
#Generate some random number of cell types
k <- sample(1:100)
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = k,
itter = 1)
#We want to check that the first k columns are formatted as we expect.
check_cols <- mutate_basis_matrix(test_fit) %>%
select(all_of(2:(k+1))) %>%
colnames()
expect_true(all(str_detect(check_cols, "celltype[0-9]*_features")))
})
test_that("colnames are formatted correctly", {
#Generate some random number of cell types
k <- sample(1:100, 1)
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = k,
itter = 1)
#We want to check that the first k columns are formatted as we expect.
check_cols <- mutate_basis_matrix(test_fit) %>%
select(all_of(2:(k+1))) %>%
colnames()
expect_true(all(str_detect(check_cols, "celltype[0-9]*_features")))
})
k
test_that("colnames are formatted correctly", {
#Generate some random number of cell types
k <- sample(2:10, 1)
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = k,
itter = 1)
#We want to check that the first k columns are formatted as we expect.
check_cols <- mutate_basis_matrix(test_fit) %>%
select(all_of(2:(k+1))) %>%
colnames()
expect_true(all(str_detect(check_cols, "celltype[0-9]*_features")))
})
test_that("std deviation works with more than two cell types", {
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = 5,
itter = 1)
sd_vec <- mutate_basis_matrix(test_fit) %>%
pull(std_dev)
expect_true(is.numeric(sd_vec))
expect_true(all(sd_vec > 0))
})
test_that("feature score works with more than two cell types", {
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = 5,
itter = 1)
fs_vec <- mutate_basis_matrix(test_fit) %>%
pull(feature_score)
expect_true(is.numeric(fs_vec))
})
test_that("bin_pair column exists", {
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = 5,
itter = 1)
bp_vec <- mutate_basis_matrix(test_fit) %>%
pull(bin_pair)
expect_true(is.character(bp_vec))
})
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = 5,
itter = 1)
mutate_basis_matrix(test_fit)
check()
load_all()
test_that("colnames are formatted correctly", {
#Generate some random number of cell types
k <- sample(2:10, 1)
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = k,
itter = 1)
#We want to check that the first k columns are formatted as we expect.
check_cols <- mutate_basis_matrix(test_fit) %>%
select(all_of(2:(k+1))) %>%
colnames()
expect_true(all(str_detect(check_cols, "celltype[0-9]*_features")))
})
k <- sample(2:10, 1)
test_fit <- thunder("example_data/test_data.txt.gz", n_cell_types = k,
itter = 1)
#We want to check that the first k columns are formatted as we expect.
check_cols <- mutate_basis_matrix(test_fit) %>%
select(all_of(2:(k+1))) %>%
colnames()
check_cols
check()
check()
load_all()
load_all()
check()
check()
test_check("thunder")
test_file("tests/testthat/test-thunder.R")
test_file("tests/testthat/test-thunder.R")
test_file("tests/testthat/test-mutate_basis_matrix.R")
check()
check()
check()
suppressWarnings(readLines("http://worldclockapi.com/api/json/utc/now",
warn = FALSE))
check()
check()
load_all()
thunder("test_data.txt.gz", n_cell_types = 2,
itter = 1,
out_init_nmf = "test_data_init_out.rds")
test_file("tests/testthat/test-thunder.R")
load_all()
thunder("test_data.txt.gz", n_cell_types = 5,
itter = 1)
thunder("tests/testthat/test_data.txt.gz", n_cell_types = 5,
itter = 1)
load_all()
check()
check()
check()
check()
document()
document()

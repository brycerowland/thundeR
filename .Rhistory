test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
load_all()
test_active_file()
test_active_file()
load_all()
test_active_file()
load_all()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
load_all()
test_active_file()
test_active_file()
test_active_file()
load_all()
test_active_file()
load_all()
test_active_file()
load_all()
test_active_file()
load_all()
test_active_file()
test_active_file()
load_all()
test_active_file()
load_all()
test_active_file()
load_all()
test_active_file()
test_active_file()
test_active_file()
load_all()
test_active_file()
test_active_file()
load_all()
test_active_file()
test_active_file()
load_all()
test_active_file()
load_all()
test_active_file()
test_active_file()
test_active_file()
load_all()
test_active_file()
test_active_file()
library(thundeR)
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_that("THUNDER gives an informative error message for bad column names", {
#First column should be feature_name
expect_error(run_thunder("new_cols_test_data.txt",
n_cell_types = 2,
itter = 1,
subset_mix_out_path = "new_cols_subset.txt.gz"),
"First column",
ignore.case = T)
})
test_that("THUNDER gives an informative error message for bad column names", {
#First column should be feature_name
expect_error(run_thunder("new_cols_test_data.txt",
n_cell_types = 2,
itter = 1,
subset_mix_out_path = "new_cols_subset.txt.gz"),
"First column",
ignore.case = T)
})
test_active_file()
test_active_file()
test_active_file()
?expect_error
test_active_file()
?Error
?errorCondition
test_active_file()
test_active_file()
test_that("THUNDER gives an informative error message for bad column names", {
#First column should be feature_name
expect_error(run_thunder("old_format_test_data.txt",
n_cell_types = 2,
itter = 1,
subset_mix_out_path = "new_cols_subset.txt.gz"),
"First column")
})
test_active_file()
test_active_file()
test_that("THUNDER gives an informative error message for bad column names", {
#First column should be feature_name
expect_error(run_thunder("tests/testthat/old_format_test_data.txt",
n_cell_types = 2,
itter = 1,
subset_mix_out_path = "new_cols_subset.txt.gz"),
"First column")
})
test_that("THUNDER gives an informative error message for bad column names", {
#First column should be feature_name
expect_error(run_thunder("tests/testthat/old_no_contact_type copy.txtold_no_contact_type.txt",
n_cell_types = 2,
itter = 1,
subset_mix_out_path = "new_cols_subset.txt.gz"),
"First column")
})
test_that("THUNDER gives an informative error message for bad column names", {
#First column should be feature_name
expect_error(run_thunder("tests/testthat/old_no_contact_type copy.txt",
n_cell_types = 2,
itter = 1,
subset_mix_out_path = "new_cols_subset.txt.gz"),
"First column")
})
test_that("THUNDER gives an informative error message when contact_type isn't provided", {
#First column should be feature_name
expect_error(run_thunder("tests/testthat/old_no_contact_type copy.txt",
n_cell_types = 2,
itter = 1,
subset_mix_out_path = "new_cols_subset.txt.gz"),
"Second column")
})
test_that("THUNDER gives an informative error message when contact_type isn't provided", {
#First column should be feature_name
expect_error(run_thunder("tests/testthat/old_no_contact_type copy.txt",
n_cell_types = 2,
itter = 1,
subset_mix_out_path = "new_cols_subset.txt.gz"),
"Second column")
})
run_thunder("tests/testthat/old_no_contact_type copy.txt",
n_cell_types = 2,
itter = 1,
subset_mix_out_path = "new_cols_subset.txt.gz")
test_that("THUNDER gives an informative error message when contact_type isn't provided", {
#First column should be feature_name
expect_error(run_thunder("tests/testthat/old_no_contact_type copy.txt",
n_cell_types = 2,
itter = 1,
subset_mix_out_path = "new_cols_subset.txt.gz"),
"Second column")
})
load_all()
test_that("THUNDER gives an informative error message when contact_type isn't provided", {
#First column should be feature_name
expect_error(run_thunder("tests/testthat/old_no_contact_type copy.txt",
n_cell_types = 2,
itter = 1,
subset_mix_out_path = "new_cols_subset.txt.gz"),
"Second column")
})
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
.raw_mix
.raw_mix %>% filter(across(contains("mixture"), ~rowSums(.x) > 100))
.raw_mix %>% filter(across(contains("mixture"), ~rowSums(.) > 100))
.raw_mix %>% filter(rowSums(across(contains("mixture")) > 100))
.raw_mix %>% mutate(across(contains("mixture"), rowSums))
test_active_file()
.raw_mix %>% rowwise() %>% mutate(across(contains("mixture"), rowSums))
.raw_mix %>% rowwise() %>% mutate(across(contains("mixture"), sum))
.raw_mix %>% rowwise() %>% mutate(s = across(contains("mixture"), sum))
.raw_mix %>% rowwise() %>% mutate(s = across(contains("mixture"), sum))
.raw_mix %>% rowwise() %>% mutate(s = across(contains("mixture"), rowSum))
.raw_mix %>% rowwise() %>% mutate(s = across(contains("mixture"), rowSums))
.raw_mix %>% rowwise() %>% mutate(s = across(contains("mixture"), rowSums))
.raw_mix %>% rowwise() %>% mutate(s = rowSums(contains("mixture")))
.raw_mix %>% rowwise() %>% mutate(s = rowSums(across(contains("mixture"))))
.raw_mix %>% rowwise() %>% mutate(s = rowSums(across(contains("mixture"))) > 100)
.raw_mix %>% rowwise() %>% filter(rowSums(across(contains("mixture"))) > 100)
test_active_file()
test_active_file()
library(devtools)
test_active_file()
.raw_mix %>%
select(-c(1,2))
test_active_file()
.mix
test_active_file()
library(devtools)
test_active_file()
test_active_file()
load_all()
test_active_file()
test_that("When Step 2 is not run init fit is returned", {
set.seed(13)
mix <- read_tsv("tests/testthat/new_cols_test_data2.tsv",
show_col_types = F) %>%
column_to_rownames("feature_name") %>%
filter(rowSums(.) != 0)
thunder_fit <- run_thunder("new_cols_test_data2.tsv", n_cell_types = 2,
itter = 1,
subset_mix_out_path = "test_subset_out.txt.gz")
expect_true(nrow(basis(thunder_fit)) == nrow(mix))
})
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
colnames(.basis)
.basis
bind_cols(feature_name, contact_type, .basis)
test_active_file()
feature_name
contact_type
.basis
tibble(feature_name = feature_name, )
tibble(feature_name = feature_name, contact_type = contact_type)
tibble(feature_name = feature_name, contact_type = contact_type, .basisi)
test_active_file()
.raw_mix
.raw_mix %>%
filter(rowSums(across(contains("mixture"))) > 0)
test_active_file()
tibble(feature_name = feature_name,
contact_type = contact_type,
.basis)
tibble(feature_name = feature_name,
contact_type = contact_type)
contact_type
feature_name
test_active_file()
read_tsv(path_to_mixture,
show_col_types = FALSE) %>%
filter(rowSums(across(-c(1,2))) > 0)
test_active_file()
tibble(feature_name = feature_name,
contact_type = contact_type)
tibble(feature_name = feature_name,
contact_type = contact_type, .basis)
as_tibble(.basis)
tibble(feature_name = feature_name,
contact_type = contact_type,
as_tibble(.basis))
tibble(feature_name = feature_name,
contact_type = contact_type,
as_tibble(.basis)) %>%
rowwise() %>%
mutate(std_dev = sd(c_across(starts_with("celltype"))),
feature_score = featureScore(nmf_obj))
test_active_file()
tibble(feature_name = feature_name,
contact_type = contact_type,
as_tibble(.basis)) %>%
rowwise() %>%
mutate(std_dev = sd(c_across(starts_with("celltype")))) %>%
ungroup() %>%
mutate(feature_score = featureScore(nmf_obj))
tibble(feature_name = feature_name,
contact_type = contact_type,
as_tibble(.basis)) %>%
rowwise() %>%
mutate(std_dev = sd(c_across(starts_with("celltype")))) %>%
ungroup() %>%
mutate(feature_score = featureScore(nmf_obj))
test_active_file()
test_active_file()
test_active_file()
test_that("Basis matrix colnames are formatted correctly", {
#Process input data.
.raw_mix <- read_tsv("tests/testthat/new_cols_test_data.txt",
show_col_types = FALSE) %>%
filter(rowSums(across(-c(1,2))) > 0)
.feature_name <- .raw_mix$feature_name
.contact_type <- .raw_mix$contact_type
.mix <- .raw_mix %>%
select(-c(1,2))
#NMF fit
test_fit <- nmf_fit(mixture = .mix, n_cell_types = 2, itter = 1)
#We want to check that the first k columns are formatted as we expect.
cols <- colnames(mutate_basis_matrix(test_fit, feature_name = .feature_name, contact_type = .contact_type))
expect_true(all(str_detect(cols[,-c(1,2)], "celltype[0-9]*_features")))
expect_true(any(str_detect(cols, "contact_type")))
expect_true(any(str_detect(cols, "feature_name")))
})
test_that("Basis matrix colnames are formatted correctly", {
#Process input data.
.raw_mix <- read_tsv("tests/testthat/new_cols_test_data.txt",
show_col_types = FALSE) %>%
filter(rowSums(across(-c(1,2))) > 0)
.feature_name <- .raw_mix$feature_name
.contact_type <- .raw_mix$contact_type
.mix <- .raw_mix %>%
select(-c(1,2))
#NMF fit
test_fit <- nmf_fit(mixture = .mix, n_cell_types = 2, itter = 1)
#We want to check that the first k columns are formatted as we expect.
cols <- colnames(mutate_basis_matrix(test_fit, feature_name = .feature_name, contact_type = .contact_type))
print(cols)
expect_true(all(str_detect(cols[,-c(1,2)], "celltype[0-9]*_features")))
expect_true(any(str_detect(cols, "contact_type")))
expect_true(any(str_detect(cols, "feature_name")))
})
test_that("Basis matrix colnames are formatted correctly", {
#Process input data.
.raw_mix <- read_tsv("tests/testthat/new_cols_test_data2.txt",
show_col_types = FALSE) %>%
filter(rowSums(across(-c(1,2))) > 0)
.feature_name <- .raw_mix$feature_name
.contact_type <- .raw_mix$contact_type
.mix <- .raw_mix %>%
select(-c(1,2))
#NMF fit
test_fit <- nmf_fit(mixture = .mix, n_cell_types = 2, itter = 1)
#We want to check that the first k columns are formatted as we expect.
cols <- colnames(mutate_basis_matrix(test_fit, feature_name = .feature_name, contact_type = .contact_type))
print(cols)
expect_true(all(str_detect(cols[,-c(1,2)], "celltype[0-9]*_features")))
expect_true(any(str_detect(cols, "contact_type")))
expect_true(any(str_detect(cols, "feature_name")))
})
test_that("Basis matrix colnames are formatted correctly", {
#Process input data.
.raw_mix <- read_tsv("tests/testthat/new_cols_test_data.txt",
show_col_types = FALSE) %>%
filter(rowSums(across(-c(1,2))) > 0)
.feature_name <- .raw_mix$feature_name
.contact_type <- .raw_mix$contact_type
print(.contact_type)
.mix <- .raw_mix %>%
select(-c(1,2))
#NMF fit
test_fit <- nmf_fit(mixture = .mix, n_cell_types = 2, itter = 1)
#We want to check that the first k columns are formatted as we expect.
cols <- colnames(mutate_basis_matrix(test_fit, feature_name = .feature_name, contact_type = .contact_type))
print(cols)
expect_true(all(str_detect(cols[,-c(1,2)], "celltype[0-9]*_features")))
expect_true(any(str_detect(cols, "contact_type")))
expect_true(any(str_detect(cols, "feature_name")))
})
test_that("Basis matrix colnames are formatted correctly", {
#Process input data.
.raw_mix <- read_tsv("tests/testthat/new_cols_test_data2.tsv",
show_col_types = FALSE) %>%
filter(rowSums(across(-c(1,2))) > 0)
.feature_name <- .raw_mix$feature_name
.contact_type <- .raw_mix$contact_type
print(.contact_type)
.mix <- .raw_mix %>%
select(-c(1,2))
#NMF fit
test_fit <- nmf_fit(mixture = .mix, n_cell_types = 2, itter = 1)
#We want to check that the first k columns are formatted as we expect.
cols <- colnames(mutate_basis_matrix(test_fit, feature_name = .feature_name, contact_type = .contact_type))
print(cols)
expect_true(all(str_detect(cols[,-c(1,2)], "celltype[0-9]*_features")))
expect_true(any(str_detect(cols, "contact_type")))
expect_true(any(str_detect(cols, "feature_name")))
})
cols
#Process input data.
.raw_mix <- read_tsv("tests/testthat/new_cols_test_data2.tsv",
show_col_types = FALSE) %>%
filter(rowSums(across(-c(1,2))) > 0)
.feature_name <- .raw_mix$feature_name
.contact_type <- .raw_mix$contact_type
.mix <- .raw_mix %>%
select(-c(1,2))
#NMF fit
test_fit <- nmf_fit(mixture = .mix, n_cell_types = 2, itter = 1)
#We want to check that the first k columns are formatted as we expect.
cols <- colnames(mutate_basis_matrix(test_fit, feature_name = .feature_name, contact_type = .contact_type))
print(cols)
cols[-c(1,2)]
cols[-c(1,2, "std_dev", "feature_score")]
str_detect(cols[-c(1,2)], "celltype[0-9]*_features")
test_that("Basis matrix colnames are formatted correctly", {
k <- 2
#Process input data.
.raw_mix <- read_tsv("tests/testthat/new_cols_test_data2.tsv",
show_col_types = FALSE) %>%
filter(rowSums(across(-c(1,2))) > 0)
.feature_name <- .raw_mix$feature_name
.contact_type <- .raw_mix$contact_type
.mix <- .raw_mix %>%
select(-c(1,2))
#NMF fit
test_fit <- nmf_fit(mixture = .mix, n_cell_types = k, itter = 1)
#We want to check that the first k columns are formatted as we expect.
cols <- colnames(mutate_basis_matrix(test_fit, feature_name = .feature_name, contact_type = .contact_type))
print(cols)
expect_true(sum(str_detect(cols[-c(1,2)], "celltype[0-9]*_features")) == k)
expect_true(any(str_detect(cols, "contact_type")))
expect_true(any(str_detect(cols, "feature_name")))
})
test_that("Basis matrix colnames are formatted correctly", {
k <- 2
#Process input data.
.raw_mix <- read_tsv("tests/testthat/new_cols_test_data2.tsv",
show_col_types = FALSE) %>%
filter(rowSums(across(-c(1,2))) > 0)
.feature_name <- .raw_mix$feature_name
.contact_type <- .raw_mix$contact_type
.mix <- .raw_mix %>%
select(-c(1,2))
#NMF fit
test_fit <- nmf_fit(mixture = .mix, n_cell_types = k, itter = 1)
#We want to check that the first k columns are formatted as we expect.
cols <- colnames(mutate_basis_matrix(test_fit, feature_name = .feature_name, contact_type = .contact_type))
print(cols)
expect_true(sum(str_detect(cols, "celltype[0-9]*_features")) == k)
expect_true(any(str_detect(cols, "contact_type")))
expect_true(any(str_detect(cols, "feature_name")))
})
test_that("Basis matrix colnames are formatted correctly", {
k <- 6
#Process input data.
.raw_mix <- read_tsv("tests/testthat/new_cols_test_data2.tsv",
show_col_types = FALSE) %>%
filter(rowSums(across(-c(1,2))) > 0)
.feature_name <- .raw_mix$feature_name
.contact_type <- .raw_mix$contact_type
.mix <- .raw_mix %>%
select(-c(1,2))
#NMF fit
test_fit <- nmf_fit(mixture = .mix, n_cell_types = k, itter = 1)
#We want to check that the first k columns are formatted as we expect.
cols <- colnames(mutate_basis_matrix(test_fit, feature_name = .feature_name, contact_type = .contact_type))
print(cols)
expect_true(sum(str_detect(cols, "celltype[0-9]*_features")) == k)
expect_true(any(str_detect(cols, "contact_type")))
expect_true(any(str_detect(cols, "feature_name")))
})
test_active_file()
test_active_file()
test_that("Basis matrix colnames are formatted correctly", {
k <- 2
#Process input data.
.raw_mix <- read_tsv("new_cols_test_data2.tsv",
show_col_types = FALSE) %>%
filter(rowSums(across(-c(1,2))) > 0)
.feature_name <- .raw_mix$feature_name
.contact_type <- .raw_mix$contact_type
.mix <- .raw_mix %>%
select(-c(1,2))
#NMF fit
test_fit <- nmf_fit(mixture = .mix, n_cell_types = k, itter = 1)
#We want to check that the first k columns are formatted as we expect.
cols <- colnames(mutate_basis_matrix(test_fit, feature_name = .feature_name, contact_type = .contact_type))
print(cols)
expect_true(sum(str_detect(cols, "celltype[0-9]*_features")) == k)
expect_true(any(str_detect(cols, "contact_type")))
expect_true(any(str_detect(cols, "feature_name")))
})
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
.mix
feature_name
contact_type
test_fit
test_active_file()
test_active_file()
test_that("subset_mix_out_path argument of thunder_feature_selection saves feature_name and contact_type", {
subset <- subset_init_nmf(mixture_data = .mix, nmf_obj = test_fit,
feature_name = .feature_name,
contact_type = .contact_type)
browser(subset)
expect_true("bin_name" %in% colnames(subset))
expect_true("contact_type" %in% colnames(subset))
expect_type(subset$bin_name, "character")
})
test_active_file()
mixture_data
mixture_data %>% filter(rows)
rows
mixture_data %>% slice(rows)
mixture_data[rows,]
tibble(feature_name = feature_name)
mixture_data
tibble(feature_name, mixture_data)
tibble(feature_name, mixture_data) %>% slice(rows)
tibble(feature_name, contact_type, mixture_data) %>% slice(rows)
tibble(feature_name, contact_type, mixture_data) %>% slice(rows)
test_active_file()
require("devtools")
require("devtools")
if(require("devtools")){print("true")}
detach("package:devtools", unload = TRUE)
if(require("devtools")){print("true")}
detach("package:devtools", unload = TRUE)
?require
require("chincilla")
if(require("chincilla"))
if(require("chincilla")){ print ("hi")}
if(!require("chincilla")){ print ("hi")}
if(!require("chincilla")){install.packages("chinchilla")}
if(!require("NMF")){install.packages("NMF")}
if(!require("devtools")){install.packages("devtools")}
if(!require("NMF")){install.packages("NMF")}
devtools::install_github("https://github.com/brycerowland/thundeR.git")
library(thundeR)
?run_thunder
setwd("~/Desktop/UNC/research/yun/HiC/thundeR")
?thunder_estimate_CTP
thundeR::get_props()
